name: CI

permissions:
  actions: read
  checks: read
  contents: write
  deployments: read
  id-token: write
  issues: write
  packages: read
  pages: read
  pull-requests: write
  repository-projects: read

on:
  pull_request:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
        # https://github.com/Spotifyd/spotifyd/issues/659#issuecomment-737730954
      - run: sudo apt install librust-alsa-sys-dev
      - run: cargo clippy

  unit-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: sudo apt install librust-alsa-sys-dev
      - run: cargo test

  smoke-test:
    # TODO: this is slow, disable this for now
    if: false
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            cache: '~/.config/musicgpt'
          - os: windows-latest
            cache: 'C:\Users\runneradmin\AppData\Roaming\gabotechs\musicgpt'
            # TODO: There's two things wrong with this:
            #  - too slow, like crazy slow compared to others
            #  - does not work when cached
#          - os: macos-latest
#            cache: '~/Library/Application Support/com.gabotechs.musicgpt'
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: sudo apt install librust-alsa-sys-dev
      - uses: actions/cache@v3
        with:
          path: ${{ matrix.cache }}
          key: ${{ matrix.os }}-data-dir
      - run: cargo run --release -- --prompt 'Create a LoFi song' --secs 1 --model small

  tag:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs:
      - unit-test
#      - smoke-test
      - clippy
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0' # https://github.com/actions/checkout/issues/217

      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: cargo install cargo-release
      - name: Bump versions
        run: |
          SEM_VER=$(.github/semver.sh)
          cargo release version $SEM_VER -x --no-confirm
      - name: Tag
        id: tag
        run: |
          version=`grep '^version = ' Cargo.toml | sed 's/version = //; s/\"//; s/\"//'`
          git config user.name github-actions
          git config user.email github-actions@github.com 
          git add .
          git commit -m "ci: v$version"
          git tag "v$version"
          git push
          git push --tags
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - uses: taiki-e/create-gh-release-action@v1
        with:
          ref: refs/tags/v${{ steps.tag.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      version: ${{ steps.tag.outputs.version }}

  cargo-release:
    needs: tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: sudo apt install librust-alsa-sys-dev
      - run: cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  homebrew-release:
    needs: tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: gabotechs/homebrew-taps
          token: ${{ secrets.CI_TOKEN }}
      - uses: actions/checkout@v4
        with:
          path: repo
      - run: sed "s/<version>/${{ needs.tag.outputs.version }}/g" repo/.github/musicgpt.rb > musicgpt.rb
      - run: |
          git add musicgpt.rb
          git config user.name github-actions
          git config user.email github-actions@github.com 
          git commit -m "Brew formula update for musicgpt version v${{ needs.tag.outputs.version }}"
          git push

  upload-x86_64-unknown-linux-gnu:
    needs: tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - run: sudo apt install librust-alsa-sys-dev
      - uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: musicgpt,libonnxruntime.so,libonnxruntime_providers_cuda.so,libonnxruntime_providers_shared.so,libonnxruntime_providers_tensorrt.so
          target: ${{ env.TARGET }}
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: refs/tags/v${{ needs.tag.outputs.version }}
          checksum: sha256

  upload-aarch64-apple-darwin:
    needs: tag
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: musicgpt
          target: ${{ env.TARGET }}
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: refs/tags/v${{ needs.tag.outputs.version }}
          checksum: sha256

  upload-x86_64-apple-darwin:
    needs: tag
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: musicgpt
          target: ${{ env.TARGET }}
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: refs/tags/v${{ needs.tag.outputs.version }}
          checksum: sha256

  upload-x86_64-pc-windows-msvc:
    needs: tag
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - run: |
          echo "PERL=$((where.exe perl)[0])" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          echo "OPENSSL_SRC_PERL=$((where.exe perl)[0])" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
      - uses: taiki-e/upload-rust-binary-action@v1
        env:
          ORT_LIB_LOCATION: ${{ env.ONNX_STATIC_FILE }}\lib
        with:
          bin: musicgpt
          target: ${{ env.TARGET }}
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: refs/tags/v${{ needs.tag.outputs.version }}
          checksum: sha256
